from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiohttp import web
from dotenv import load_dotenv
import os
import json
import requests
from datetime import datetime, timedelta

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
GITHUB_API_URL = "https://api.github.com/repos/YOUR_USERNAME/YOUR_REPO/actions/workflows/backup.yml/dispatches"
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# URL –¥–ª—è Webhook (Render)
WEBHOOK_URL = 'https://turnik-checker-bot.onrender.com/webhook'
PORT = int(os.getenv('PORT', 5000))

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
keyboard = InlineKeyboardMarkup(row_width=2)
keyboard.add(
    InlineKeyboardButton("üì• Check in", callback_data="checkin"),
    InlineKeyboardButton("üìä My streak", callback_data="status")
).add(
    InlineKeyboardButton("üîù Top streaks", callback_data="leaders"),
    InlineKeyboardButton("üèÜ All-time top", callback_data="leaders_all")
)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "data.json"

if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, "w") as f:
        json.dump({}, f)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook
async def on_start():
    await bot.set_webhook(WEBHOOK_URL)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start(message: Message):
    username = message.from_user.username or message.from_user.full_name
    text = f"""Hello, {username}!

I'm Pull-up Tracker Bot üí™
I'll help you track your daily workout progress ‚Äî globally!

Just press 'üì• Check in' after each workout day.

Available options:
üì• Check in ‚Äî mark today's workout
üìä My streak ‚Äî show your current streak
üîù Top streaks ‚Äî leaderboard by streak
üèÜ All-time top ‚Äî total workouts leaderboard
"""
    await message.reply(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Check in"
@dp.callback_query_handler(lambda c: c.data == 'checkin')
async def callback_checkin(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    username = callback_query.from_user.username or callback_query.from_user.full_name
    data = load_data()
    now = datetime.now().date()
    now_str = str(now)

    if user_id not in data:
        data[user_id] = {
            "username": username,
            "current_streak": 1,
            "total_days": 1,
            "checkin_dates": [now_str],
            "last_checkin": now_str
        }
        await callback_query.message.answer(f"{username}, your first day is checked in!", reply_markup=keyboard)
    else:
        user = data[user_id]
        last = datetime.fromisoformat(user["last_checkin"]).date()

        if now == last:
            await callback_query.message.answer(f"{username}, you've already checked in today!", reply_markup=keyboard)
            return

        if now - last == timedelta(days=1):
            user["current_streak"] += 1
        else:
            user["current_streak"] = 1

        user["total_days"] += 1
        user["last_checkin"] = now_str

        if now_str not in user.get("checkin_dates", []):
            user.setdefault("checkin_dates", []).append(now_str)

        await callback_query.message.answer(f"{username}, logged! Your streak: {user['current_streak']} days", reply_markup=keyboard)

    save_data(data)

# –ö–æ–º–∞–Ω–¥–∞ /status
@dp.callback_query_handler(lambda c: c.data == 'status')
async def callback_status(callback_query: types.CallbackQuery):
    data = load_data()
    user_id = str(callback_query.from_user.id)

    if user_id in data:
        user = data[user_id]
        await callback_query.message.answer(
            f"üìä Your streak: {user['current_streak']} days in a row\nTotal check-ins: {user.get('total_days', 0)}",
            reply_markup=keyboard
        )
    else:
        await callback_query.message.answer("You haven't checked in yet. Press 'üì• Check in'", reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /leaders (–¢–æ–ø –ø–æ —Å–µ—Ä–∏–∏)
@dp.callback_query_handler(lambda c: c.data == 'leaders')
async def callback_leaders(callback_query: types.CallbackQuery):
    data = load_data()

    leaderboard = sorted(data.items(), key=lambda x: x[1]["current_streak"], reverse=True)
    text = "**üî• Global Top Current Streaks:**\n"
    for i, (uid, udata) in enumerate(leaderboard, 1):
        text += f"{i}. @{udata['username']}: {udata['current_streak']} days\n"

    await callback_query.message.answer(text, reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /leaders_all (–¢–æ–ø –ø–æ –≤—Å–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º)
@dp.callback_query_handler(lambda c: c.data == 'leaders_all')
async def callback_leaders_all(callback_query: types.CallbackQuery):
    data = load_data()

    leaderboard = sorted(data.items(), key=lambda x: x[1].get("total_days", 0), reverse=True)
    text = "**üèÜ Global All-Time Top:**\n"
    for i, (uid, udata) in enumerate(leaderboard, 1):
        total = udata.get("total_days", 0)
        text += f"{i}. @{udata['username']}: {total} check-ins\n"

    await callback_query.message.answer(text, reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ GitHub (backup)
@dp.message_handler(commands=["save_backup"])
async def save_backup(message: Message):
    headers = {
        "Authorization": f"Bearer {GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json"
    }
    payload = {
        "ref": "main"
    }

    try:
        response = requests.post(GITHUB_API_URL, json=payload, headers=headers)
        if response.status_code == 201:
            await message.reply("Backup started successfully! üöÄ", reply_markup=keyboard)
        else:
            await message.reply(f"Failed to start backup. Error: {response.status_code}", reply_markup=keyboard)
    except Exception as e:
        await message.reply(f"An error occurred: {str(e)}", reply_markup=keyboard)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å Webhook
async def main():
    await on_start()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    app = web.Application()
    app.router.add_post('/webhook', dp.start_webhook)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è webhook
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ Render
